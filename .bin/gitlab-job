#!/usr/bin/env python3
# pyright: strict

import json
import subprocess
import sys
from dataclasses import dataclass
from typing import Any


def main():
    argv = sys.argv[1:]
    job = next((a for a in argv if not a.startswith("-")), None) or ask_job()
    flags = [a for a in argv if a != job]
    subprocess.run(["gitlab-ci-local"] + flags + [job])


def ask_job():
    jobs = job_list()
    try:
        job = subprocess.check_output(
            ["fzf"],
            input="\n".join(job.name for job in jobs).encode(),
        )
        return job.decode().strip()
    except subprocess.CalledProcessError as error:
        if error.returncode == 130:
            raise KeyboardInterrupt()
        raise


def job_list():
    with subprocess.Popen(
        ["gitlab-ci-local", "--list-json"],
        stdout=subprocess.PIPE,
        stderr=subprocess.DEVNULL,
    ) as child:
        if not child.stdout:
            raise Unreachable()
        return map(Job.from_dict, json.load(child.stdout))


@dataclass
class Job:
    name: str

    @staticmethod
    def from_dict(value: Any):
        return Job(name=value["name"])


class Unreachable(BaseException):
    pass


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("Keyboard interrupt")
